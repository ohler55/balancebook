type Query {
  company: Company
  fx: Fx
}

type Fx {
  currency(name: String!): Currency
  currencies: [Currency]
}

type Currency {
  rates(start: Date, end: Date): Rate
  rate(date: Date): Rate
}

type Rate {
  date: Date
  rate: Float
}

type Company {
  name: String!
  start: Date!
  accounts: [Account]
  taxes: [Tax]
  customers: [Customer]
  categories: [Category]
  invoices: [Invoice]
  ledger: [Transaction]
  reports: Reports
}

type Account {
  id: ID!
  name: String!
  address: String
  id: String
  aba: String
  kind: AccountType
}

enum AccountType {
  CHECKING
  SAVINGS
  CASH
}

type BankTrans {
  id: ID!
  credit: Boolean!
  date: Date!
  amount: Float!
  currency: String!
  who: String
  note: String
  ledgerTrans: [ID]
}

type Customer {
  id: ID
  name: String!
  contacts: [Contact]
  currency: String
  address: String
  country: String
  notes: String
}

type Contact {
  id: ID!
  name: String
  role: String
  email: String
  phone: String
}

type Invoice {
  id: String!
  submitted: Date
  amount: Float
  to: Customer
  tax: [TaxAmount]
  payments: [Payment]
}

type Payment {
  account: Account
  when: Date
  amount: Float
}

type Transaction {
  id: ID!
  credit: Boolean!
  date: Date!
  amount: Float!
  who: String
  account: ID!
  category: ID!
  tax: [TaxAmount]
  acctTrans: ID
  file: String
  note: String
}

type Category {
  id: ID!
  name: String!
}

type Tax {
  id: ID!
  name: String!
  percent: Float!
}

type TaxAmount {
  tax: ID!
  amount: Float
}

type Filter {
  start: Date
  end: Date
  match: [Attr]
}

scalar Date

########################################################################

# TBD late report is not one of the expected reports as it can be pulled
# directly from Invoice fields. There may be others though so this is
# temporary only.
type Reports {
  late: LateReport
}

type LateReport {
  rows: [LateRow]
}

type LateRow {
  id: String!
  submitted: Date
  amount: Float
  paid: String
  daysTillPaid: Int
  interest: Float
}

type Column {
  key: String
  label: String
}

type Attr {
  key: String!
  int: Int
  float: Float
  str: String
  bool: Boolean
  date: Date
}
