;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

remember
------------
 - ledgers is just that, no need to adjust for account transfers
 - use transfers from bank to cash to cover owner use of cash
 - if bank trtansactions are not on the same date as a ledger entry they will not balance at the end of the year (ok I think)

todo
-----------

- help for reports
- what to do about FX-Loss
 - already reflected in account
  - just used for tracking, no need for account maybe

- Bills
 - use for Liabilities in balance report
 - add 2019q4 HST along with payments

 - add as cmd as well

- income statement

  Revenue
   UHN                     $
   Total                   $

  Expenses
    Per Diem    $
   Total        $

  Net Income    $

- use () for negative (maybe an option)

- balance sheet as of date

  Assets
    cash                amount currency  USD(base)
    accounts
    total

    accounts receivable

  Liabilities
    expenses
    total

  Owner Equity
    CAD
    USD

 or side by side

  Assets           Liabilities
                   Equity
  - totals on each should match


- fx loss for cash accounts is when expense occurred vs when paid back
 - balance should use rate from day of expenses
  - maybe show both rate by day and rate of today

- taxes
 - IRS
  - withholding
  - social security [6.2% of first $132900 for both corp and employee]
  - medicare [1.45% for both corp and employee] [additional 0.9% for that over 200K]
  - FUTA (is this really needed?)
 - FTB
  - SDI (State Disability Insurance) [1.0% of first $118371]
  - UI (Unemployment Insurance) [5.4% of first $7000]
  - ETT (Employment Training Tax) [0.1% of first $7000]
  - PIT (Personal Income Tax)

- todo
 - Revenue
 - Accounts Receivable
 - HST account(s)
  -
 - Liability
  - loan from owner

- maybe have a general asset account
 - categories for more detail
 - buy something reduces amount in bank and (decrease or increase assets?)
  - decrease cash (bank)
  - increase expense account which is a negative for value

- account types
 - asset
 - liability
 - equity (retained earnings)
 - revenue
 - expense (stuff bought, use categories to break it down further)

- maybe tiered
 - assets (income or revenue accounts)
  - bank and cash
  - accounts receiveable
  - inventory
  - fixed assets (last more than a year)
  - income (+) invoices and payments
   - expense
    - categories are separate sub-accounts
   - revenue
  - cost of goods sold (-)
  - expense (-)
   - salary
   - rent
   - utilities
   - office
   - payroll taxes
   - professional fees
   - phone
   - repairs
   - travel
   - entertainment (and meals)
   - depreciation
 - liability
  - accounts payable (enter bill amounts if not paid immediately)
   - unpaid per-diem
  - sales tax (HST)
 - equity
  - loans (+)
  - retained earnings (+)
  - distributions (-)

- maybe track just actual transactions
 - bank
 - cash accounts
 - xfers
 - transaction log / ledger
  - place to track receipts, expenses, and to match up with banks
 - invoices
 - payments - match with invoices as needed
 - income
- then layer to form double entry views

- maybe track for normal people but generate reports for accountants?
 - each account has pending and verified
  - buy something
   - bank gets a pending
   - expense (or income) account transaction created for a deduction
   - when bank trans are downloaded the expense moved from pending to verified
  - invoice
   - income or invoice account gets a pending
    - pending is just accounts receivable
   - HST gets pending
   - when paid
    - move from pending to verified
     - want to match with bank also, maybe that is just the verify step
  - loan from owner
   - bank increase
   - liability increase
 - account types - used to determine sign of entries when calculating
  - asset (+) owned by company (bank, cash)
   - income (+) invoices and payments
   - cost of goods sold (-)
   - expense (-)
  - liability (-)
  - equity (+ calculated)

- structure
 - support easy entry
  - follow use cases
  - user perspective
 - support structured objects for store and detail queries
  - object based, JSON store
  - developer perspective (graphql as well as user display)
  - simplicity of calculations and updates
 - support accounting reports
  - accountant perspective

- drive by use cases
 - expense with receipt
 - bank entry occurs
 - buy with cash
 - invoice
 - invoice paid
 - loan (owner)
 - payback loan
 - end of year
  - zero out income
 - billed
 - bill paid
 - receive income without invoice
 - transfer between different currency accounts
 - capture all actions (journal? or ledger?)
  - like pending to verified
 - reports (how to collect and display the data)
  - income statement (P&L)
  - balance sheet
  - HST report
  - chart of accounts



Retained Earnings (basically owner profit)


Balance Sheet accounts:

Asset accounts (Examples: Cash, Accounts Receivable, Supplies, Equipment)
Liability accounts (Examples: Notes Payable, Accounts Payable, Wages Payable)
Stockholders' Equity accounts (Examples: Common Stock, Retained Earnings)
Income Statement accounts:

Revenue accounts (Examples: Service Revenues, Investment Revenues)
Expense accounts (Examples: Wages Expense, Rent Expense, Depreciation Expense)


- ideas
 - should each account have an account receivable element?
  - bank - means the check/expense/deposit/transfer has not cleared
  - cash - probably not needed
  - fx loss - probably not needed
  - HST
   - AR: pending invoice payment, waiting for bank clearance?

- fx loss - how to get it to zero
 - general issue, how to zero out expenses or negative accounts


- invoices
 - record invoice - revenue (always a credit - mean negative value)
  - add value to assets (accounts receivable) offset tor deduction of revenue
  - paid - accounts receivable deducts

- accounts
 - balance sheet - snapshot of current state
  - multiple accounts (assets and liabilities)
   - bank and cash are assets
 - income statement - transactions
  - all transactions (income and expenses)

- ledger always has 2 transactions for an expense or payment


- link match must not match transactions that are not blank

- new transfer should check for exisitng transaction and entries before creating
 - date and amount must match
 - set ledger and account tx

- report day difference on ledger and transaction

- transfers
 - update to new cmds
 - set up ledger entries and match bank trans
 - create fx_loss ledger entry

- how to mark transfers
 - create should set ledger_tx in transaction
  - remove those
 - need ledger entry
  - add fx loss as well

- include fx loss
 - make ledger entry
- add transfer transactions to ledger

- why is ledger amount too high in 2018?
- what to do to repay cash?
 - transfer from account?

- reorg command args to be [obj verb args]
 - can each obj have control over args?
 - transfer
 - invoice

- reorg code
 - for graphql
  - use same signature for all or provide helper for common signature
 - all models should be balancebook module
 - cmd should be just ways to display data from core classes
  - filter in core
   - maybe a filter class
    - has sub filters of period, dates, missing
     - include method to get rec value
    - common pass(rec)

- graphql schema


- get payments into invoices
 - create and populate the T4 withholding account


- reports
 - balances/entries per category
 - HST
 -

- choices are modified somehow (Payroll USA Corp)

- Field class for editing entries
 - choices can be more complex with help attached
 - allow block instead of choices (maybe that how to do help)

- interactive mode

- links
 - offer to link on new entry
  - choice of 1 if there is a matching link

- currency round correctly on conversions
 - currency.fmt(val)
  - format with symbol and shifted
 - fx.convert(val, src_cur, dest_cur, date)
  - round


- store amounts as integers
 - first step is to add _currency to account or _cur
 - currency should identify shift
 - currency should specify format (maybe a function to return amount as string)
 - when converting round instead of floor

- transfers
 - bw to usd
 - bw to cad (with fx loss)
 - look for all transfers in 2017

- put formatting in currency
 - include symbol like $
 - so maybe a val_s or something

- ledger entries
 - load ledger entries one year at a time
 - spreadsheet
  - make sure all categories map
  + import (backup first!)
  - balance report
   - ledger, each account
  - link report
  - link
   - for each transaction look for matching in one of accounts (with correct currency)
   - ask to link for each (later -y for auto yes)
  - receipt report
  - associate receipt

- cach account (owner) resolve to get target
 - $16,494.72 ?
 - $15,554.88 USD 21,575 CAD outstanding invoice
 - $3988.43 USD 2925.00 CAD withheld
 - total -3048.59
 - conversion may be slightly different

- import command
 - ledger from csv file

- dup check for ledger
- match check
 - match account, amount, and date withing X days
 - verbose shows matches

- trans should include tip (not taxed)

- do all cmds
 - show for all
 - list
 - create
 - update
 - delete

- update account
 - cmd
  - file=
  - id=
  - use same approach as inputs
  - Cmd::Base < Input::Base
  - should input just be cmd? probably

- account


also various taxes for FTB and IRS

- implement all models in schema along with validation
 + Fx
 + Currency
 + Rate
 + Customer
 + Contact
 + Invoice
 + Payment
 + Category
 + Tax
 + TaxAmount
 + Account
 + BankTrans
 + Transaction
 + Company
 - Query
 - Mutation

- Report (for graphql and for csv)


- input
 - customer
 - account
 - category
 - person
 - payment
 - bank (info into conf)
 - tax
 - transaction


- input classes
 - validate values and lookup as needed
 - check for duplicates
 - create account next

- add classes for each schema type
- decide on command handling
 - verb type options/args
 - separate cmd module
  - handle parsing and switching in cmd
   - Cmd.run(verb, type, args={})

- add input for each and start adding
 - allow command line args to set fields


- crud + list
 - by object - invoice new ...
 - or by op - new invoice ...
  - more consistent with report xxx

 - allow values to be provide like id=INV-20191111
  - if provided they are not prompted for
 - perform consitency checks
  - referenced object exist like accounts, customer, ect

- reports - generic or *specific*
 - specific
  - easy to get ID for operations on row object
  - can implement things like filtering row for display based on hidden attributes
  - can display items differently, boolean as checkbox for example or images for status
 - generic
  - use same display code
  - need position indicator for ID
  - need alignment indicator for each column
   - basically need to pass more info about the table
 - really come down to how to think about reports, are they generic or each custom

 - list
  - late
  - invoices
  - payments
  - accounts
  - customers
  - rates
  - vendors
  - P&L
  - transactions - mixed currencies
   - all
   - by account
  - balance sheet by category
  - income
   - minus expenses by category
   - by customer
   - outstanding (invoices not yet paid)
  - expense
   - by category
   - by vendor
  - general ledger
   - by category
   - all normalized to currency
  - sales tax
  - currency exchange gain and loss

- if generic
type Row {
  cells: [Cell]
}

type Cell {
  key: String # optional?
  int: Int
  str: String
  date: Date
  float: Float
  currency: Float
  bool: Boolean
}


- from web, use invoice, accounts, etc for reports with some special cases for some reports
- for console / terminal make special report for each
- graphql to trigger csv generation - provide header, object, and fields in orde

type Company {
  " Returns filepath to download. "
  classReport(class: String!, filter: Filter, header: [String], columns: [String]): String
}

Invoice {
  report(filter: Fliter, columns: [Kv]) String
}

type Kv {
  key: String
  val: String # column header if an arg to report
}

report(columns: [ {key: "one", val: "First"}, ...])
