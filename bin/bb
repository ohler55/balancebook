#!/usr/bin/env ruby

while (index = ARGV.index('-I'))
  _,path = ARGV.slice!(index, 2)
  $: << path
end

# TBD tmp for testing
$: << File.join(File.dirname(__FILE__), "../../oj/lib")
$: << File.join(File.dirname(__FILE__), "../../oj/ext")
$: << File.join(File.dirname(__FILE__), "../../ox/lib")
$: << File.join(File.dirname(__FILE__), "../../ox/ext")
$: << File.join(File.dirname(__FILE__), "../../oterm/lib")
$: << File.join(File.dirname(__FILE__), "../lib")

require 'optparse'

require 'oj'
require 'balancebook'

$verbose = true
$backups = 1
$data = nil
$fx_file = nil
$fx_url = nil
$save_ok = true
$acct_info = {}

def process_conf(f)
  f.each_line { |line|
    line.strip!
    next if line.size == 0 || line[0] == '#'
    key, val = line.split('=', 2)
    next if val.nil?
    key.strip!
    val.strip!
    keys = key.split('.')
    case keys[0]
    when 'company'
      $data = val
    when 'fx'
      case keys[1]
      when 'file'
	$fx_file = val
      when 'url'
	$fx_url = val
      end
    when 'backups'
      $backups = val.to_i
    when 'account'
      acct = $acct_info[keys[1]]
      if acct.nil?
	acct = {}
	$acct_info[keys[1]] = acct
      end
      acct[keys[2]] = val
    else
      raise StandardError.new("#{key} is not a valid configuration option.")
    end
  }
end

# Attempt to open configuration file in order ./.balancebook.conf, ~/.balancebook.conf.
['./.balancebook.conf', '~/.balancebook.conf'].each { |path|
  begin
    File.open(File.expand_path(path), 'r') { |f|
      process_conf(f)
    }
  rescue Errno::ENOENT => e
  # try the next one
  rescue Exception => e
    puts "\n*-*-* #{e.class}: #{e.message}\n\n"
    Process.exit!(1)
  end
}

opts = OptionParser.new(%{Usage: bb [options] <type> <verb> [<arg[=value]>...]

Does stuff...

verbs:

  reports <report name> [<arg>[=<value>]]...

})
opts.on('-q', 'quiet')                                                    { $verbose = false }
opts.on('-n', 'no save')                                                  { $save_ok = false }
opts.on('-c', '--conf String', String, 'configuration file')              { |f| File.open(File.expand_path(f), 'r') { |f| process_conf(f) }}
opts.on('-b', '--backups Integer', Integer, 'number of backups to keep')  { |n| $backups = n }
opts.on('-d', '--data String', String, 'company data file')               { |f| $data = f }
opts.on('-f', '--fx-file String', String, 'exchange rate file')           { |f| $fx_file = f }
opts.on('-u', '--fx-url String', String, 'exchange rate URL')             { |u| $fx_url = u }
opts.on('-h', '--help', 'Show this display')                              { puts opts.help; Process.exit!(0) }
args = opts.parse(ARGV)

if args.size < 1
  puts opts.help
  Process.exit!(1)
end

if $data.nil?
  puts '\n*-*-* No company data file specified.\n\n'
  puts opts.help
  Process.exit!(1)
end

begin
  book = BalanceBook::Book.new($data, $fx_file, $fx_url, $backups, $save_ok, $acct_info)
  book.verbose = $verbose
  book.validate

  hargs = {}
  book.act(args)
rescue Exception => e
  puts "\n*-*-* #{e.class}: #{e.message}"
  e.backtrace.each { |line| puts "  #{line}" } if $verbose
  puts
end
