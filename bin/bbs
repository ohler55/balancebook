#!/usr/bin/env ruby

while (index = ARGV.index('-I'))
  _,path = ARGV.slice!(index, 2)
  $: << path
end

# TBD tmp for testing
$: << File.join(File.dirname(__FILE__), "../../oj/ext")
$: << File.join(File.dirname(__FILE__), "../../oj/lib")

$: << File.join(File.dirname(__FILE__), "../../agoo/ext")
$: << File.join(File.dirname(__FILE__), "../../agoo/lib")

$: << File.join(File.dirname(__FILE__), "../../oterm/lib")
$: << File.join(File.dirname(__FILE__), "../lib")

require 'optparse'

require 'oj'
require 'agoo'

require 'balancebook'

$verbose = false
$backups = 1
$conf = nil
$data = nil
$rates = nil

$port = 6600
$root = File.expand_path(File.join(File.dirname(__FILE__), "../web"))

opts = OptionParser.new(%{Usage: bbs [options]

Start the server ...
})
opts.on('-v', 'verbose')                                                  { $verbose = true }
opts.on('-c', '--conf String', String, 'configuration file')              { |f| $conf = f }
opts.on('-b', '--backups Integer', Integer, 'number of backups to keep')  { |n| $backup = n }
opts.on('-d', '--data String', String, 'company data file')               { |f| $data = f }
opts.on('-r', '--rates String', String, 'exchange rate file')             { |f| $data = f }

opts.on('-p', '--port Integer', Integer, 'port to listen on')             { |p| $port = p }
opts.on('-w', '--web-pages String', String, 'root for web pages')         { |w| $root = File.expand_path(w) }

opts.on('-h', '--help', 'Show this display')                              { puts opts.help; Process.exit!(0) }
opts.parse(ARGV)

def process_conf(f)
  f.each_line { |line|
    line.strip!
    next if line.size == 0 || line[0] == '#'
    key, val = line.split('=')
    next if val.nil?
    key.strip!
    val.strip!
    keys = key.split('.')
    case keys[0]
    when 'company'
      $data = val
    when 'xrates'
      $rates = val
    when 'backups'
      $backups = val.to_i
    when 'account'
      # TBD set up account information
    else
      raise StandardError.new("#{key} is not a valid configuration option.")
    end
  }
end

if $conf.nil?
  # Attempt to open configuration file in order ./.balancebook.conf, ~/.balancebook.conf.
  ['./.balancebook.conf', '~/.balancebook.conf'].each { |path|
    begin
      File.open(File.expand_path(path), 'r') { |f|
	process_conf(f)
      }
    rescue Errno::ENOENT => e
      # try the next one
    rescue Exception => e
      puts "\n*-*-* #{e.class}: #{e.message}\n\n"
      Process.exit!(1)
    end
  }
else
  File.open(File.expand_path($conf), 'r') { |f|
    process_conf(f)
  }
end

if $data.nil?
  puts '\n*-*-* No company data file specified.\n\n'
  puts opts.help
  Process.exit!(1)
end

company = Oj.load_file(File.expand_path($data))
# This is the class that implemnts the root query operation.
class Query
  attr_reader :company

  def initialize(company)
    @company = company
  end

end

class Schema
  attr_reader :query
  attr_reader :mutation

  def initialize(company)
    @query = Query.new(company)
  end
end

Agoo::Log.configure(dir: '',
		    console: true,
		    classic: true,
		    colorize: true,
		    states: {
		      INFO: true,
		      DEBUG: false,
		      connect: $verbose,
		      request: $verbose,
		      response: $verbose,
		      eval: $verbose,
		      push: false,
		    })

File.open(File.expand_path(File.join(File.dirname(__FILE__), "../web/schema.graphql")), 'r') { |f|
  $sdl = f.read
}

begin
  Agoo::Server.init($port, $root, thread_count: 1, graphql: '/graphql')
  Agoo::Server.start()
  Agoo::GraphQL.schema(Schema.new(company)) {
    Agoo::GraphQL.load($sdl)
  }
rescue Exception => e
  puts "\n*-*-* #{e.class}: #{e.message}"
  e.backtrace.each { |line| puts "  #{line}" } if $verbose
  puts
end

# When starting with a thread_count over 0 just sleep until a ^C is
# signalled. Agoo must be running to load the SDL.
sleep

# localhost:6600/graphql?query={company{name}}&indent=2
#
# or for something bigger
#
# http://localhost:6600/graphql?query={company{name,reports{late{rows{id,submitted,amount,paid,daysTillPaid,interest}}}}}&indent=2
