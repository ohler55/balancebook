# Copyright (c) 2019, Peter Ohler, All rights reserved.

module BalanceBook
  module Model

    class Entry < Base

      attr_accessor :id
      attr_accessor :date
      attr_accessor :amount
      attr_accessor :who
      attr_accessor :account
      attr_accessor :category
      attr_accessor :taxes # TaxAmount array
      attr_accessor :tip # no tax unless part of bill
      attr_accessor :acctTrans
      attr_accessor :file
      attr_accessor :note

      def initialize(id)
	@id = id # generated by company to be unique
      end

      def tax
	return 0.0 if @taxes.nil?
	sum = 0.0
	@taxes.each { |ta| sum += ta.amount }
	sum
      end

      def validate(book)
	raise StandardError.new("Entry ID can not be empty.") unless !@id.nil? && 0 < @id
	validate_date('Entry date', @date)
	acct = book.company.find_account(@account)
	raise StandardError.new("Entry account #{@account} not found.") if acct.nil?
	cat = book.company.find_category(@category)
	raise StandardError.new("Entry category #{@category} not found.") if cat.nil?
	unless @acctTrans.nil?
	  raise StandardError.new("Account transaction #{@account}-#{@acctTrans} not found.") if acct.find_trans(@acctTrans).nil?
	end
      end

    end
  end
end
